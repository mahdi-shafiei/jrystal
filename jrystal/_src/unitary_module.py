"""
Unitary matrix module. 

This module provides functions to generate unitary matrices and their 
parameters.
"""
import jax
import jax.numpy as jnp
from jaxtyping import Array
from typing import Dict


def unitary_matrix(params: Dict, complex: bool = False) -> Array:
  """A function to generate a unitary (orthogonal) matrix from its parameters.

  The returned matrix has orthogonal columns.

  Args:
      params (dict): parameter dict. Parameters can be generated by
        `unitary_matrix_param_init`.
      complex (bool, optional): whether the matrix is complex. 
        Defaults to False.
  
  Example:
    >>> key = jax.random.PRNGKey(0)
    >>> params = unitary_matrix_param_init(key, (3, 3))
    >>> unitary_matrix(params)

  Returns:
    Array: a unitary (orthogonal) matrix with orthogonal columns.

  """
  weight_real = params['w_re']
  if complex:
    weight_imaginary = 1.j * params['w_im']
  else:
    weight_imaginary = 0.

  weight = weight_real + weight_imaginary
  orthogonal_columns = jnp.linalg.qr(weight, mode='reduced')[0]
  return orthogonal_columns


def unitary_matrix_param_init(key, shape, complex: bool = True) -> Dict:
  key_re, key_im = jax.random.split(key)
  weight_real = jax.random.uniform(key_re, shape)
  if complex:
    weight_imaginary = jax.random.uniform(key_im, shape)
  else:
    weight_imaginary = 0.
  return {'w_re': weight_real, 'w_im': weight_imaginary}
